#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnseentalentsApp.Models.Db
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Unseentalantdb")]
	public partial class UnseentalentdbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertVote(Vote instance);
    partial void UpdateVote(Vote instance);
    partial void DeleteVote(Vote instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertContactInfo(ContactInfo instance);
    partial void UpdateContactInfo(ContactInfo instance);
    partial void DeleteContactInfo(ContactInfo instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertPaymentTransaction(PaymentTransaction instance);
    partial void UpdatePaymentTransaction(PaymentTransaction instance);
    partial void DeletePaymentTransaction(PaymentTransaction instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertToken(Token instance);
    partial void UpdateToken(Token instance);
    partial void DeleteToken(Token instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertManagetoken(Managetoken instance);
    partial void UpdateManagetoken(Managetoken instance);
    partial void DeleteManagetoken(Managetoken instance);
    partial void InsertVideo(Video instance);
    partial void UpdateVideo(Video instance);
    partial void DeleteVideo(Video instance);
    #endregion
		
		public UnseentalentdbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["UnseentalantdbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public UnseentalentdbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UnseentalentdbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UnseentalentdbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UnseentalentdbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Vote> Votes
		{
			get
			{
				return this.GetTable<Vote>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<ContactInfo> ContactInfos
		{
			get
			{
				return this.GetTable<ContactInfo>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<PaymentTransaction> PaymentTransactions
		{
			get
			{
				return this.GetTable<PaymentTransaction>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Token> Tokens
		{
			get
			{
				return this.GetTable<Token>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Managetoken> Managetokens
		{
			get
			{
				return this.GetTable<Managetoken>();
			}
		}
		
		public System.Data.Linq.Table<Video> Videos
		{
			get
			{
				return this.GetTable<Video>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_GetVideoComments")]
		public ISingleResult<usp_GetVideoCommentsResult> usp_GetVideoComments([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> videoId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), videoId);
			return ((ISingleResult<usp_GetVideoCommentsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_GetRecentEvents")]
		public ISingleResult<usp_GetRecentEventsResult> usp_GetRecentEvents()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<usp_GetRecentEventsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_GetUpcomingEvents")]
		public ISingleResult<usp_GetUpcomingEventsResult> usp_GetUpcomingEvents()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<usp_GetUpcomingEventsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_GetEventPosts")]
		public ISingleResult<usp_GetEventPostsResult> usp_GetEventPosts([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> eventId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventId, userId);
			return ((ISingleResult<usp_GetEventPostsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_CheckEventStatus")]
		public ISingleResult<usp_CheckEventStatusResult> usp_CheckEventStatus([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> eventId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventId, userId);
			return ((ISingleResult<usp_CheckEventStatusResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private EntitySet<Video> _Videos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Category()
		{
			this._Videos = new EntitySet<Video>(new Action<Video>(this.attach_Videos), new Action<Video>(this.detach_Videos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Video", Storage="_Videos", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<Video> Videos
		{
			get
			{
				return this._Videos;
			}
			set
			{
				this._Videos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vote")]
	public partial class Vote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _UserId;
		
		private System.Nullable<long> _VideoId;
		
		private System.Nullable<bool> _IsVote;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private EntityRef<User> _User;
		
		private EntityRef<Video> _Video;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<long> value);
    partial void OnUserIdChanged();
    partial void OnVideoIdChanging(System.Nullable<long> value);
    partial void OnVideoIdChanged();
    partial void OnIsVoteChanging(System.Nullable<bool> value);
    partial void OnIsVoteChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public Vote()
		{
			this._User = default(EntityRef<User>);
			this._Video = default(EntityRef<Video>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt")]
		public System.Nullable<long> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoId", DbType="BigInt")]
		public System.Nullable<long> VideoId
		{
			get
			{
				return this._VideoId;
			}
			set
			{
				if ((this._VideoId != value))
				{
					if (this._Video.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVideoIdChanging(value);
					this.SendPropertyChanging();
					this._VideoId = value;
					this.SendPropertyChanged("VideoId");
					this.OnVideoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVote", DbType="Bit")]
		public System.Nullable<bool> IsVote
		{
			get
			{
				return this._IsVote;
			}
			set
			{
				if ((this._IsVote != value))
				{
					this.OnIsVoteChanging(value);
					this.SendPropertyChanging();
					this._IsVote = value;
					this.SendPropertyChanged("IsVote");
					this.OnIsVoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Vote", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Votes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Votes.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<long>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Video_Vote", Storage="_Video", ThisKey="VideoId", OtherKey="Id", IsForeignKey=true)]
		public Video Video
		{
			get
			{
				return this._Video.Entity;
			}
			set
			{
				Video previousValue = this._Video.Entity;
				if (((previousValue != value) 
							|| (this._Video.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Video.Entity = null;
						previousValue.Votes.Remove(this);
					}
					this._Video.Entity = value;
					if ((value != null))
					{
						value.Votes.Add(this);
						this._VideoId = value.Id;
					}
					else
					{
						this._VideoId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Video");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _UserId;
		
		private System.Nullable<long> _VideoId;
		
		private string _CommentText;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<bool> _IsDeleted;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<long> value);
    partial void OnUserIdChanged();
    partial void OnVideoIdChanging(System.Nullable<long> value);
    partial void OnVideoIdChanged();
    partial void OnCommentTextChanging(string value);
    partial void OnCommentTextChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Comment()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt")]
		public System.Nullable<long> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoId", DbType="BigInt")]
		public System.Nullable<long> VideoId
		{
			get
			{
				return this._VideoId;
			}
			set
			{
				if ((this._VideoId != value))
				{
					this.OnVideoIdChanging(value);
					this.SendPropertyChanging();
					this._VideoId = value;
					this.SendPropertyChanged("VideoId");
					this.OnVideoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentText", DbType="NVarChar(MAX)")]
		public string CommentText
		{
			get
			{
				return this._CommentText;
			}
			set
			{
				if ((this._CommentText != value))
				{
					this.OnCommentTextChanging(value);
					this.SendPropertyChanging();
					this._CommentText = value;
					this.SendPropertyChanged("CommentText");
					this.OnCommentTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<long>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactInfo")]
	public partial class ContactInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _pkId;
		
		private string _contactName;
		
		private string _emailId;
		
		private string _description;
		
		private System.Nullable<System.DateTime> _createdDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpkIdChanging(long value);
    partial void OnpkIdChanged();
    partial void OncontactNameChanging(string value);
    partial void OncontactNameChanged();
    partial void OnemailIdChanging(string value);
    partial void OnemailIdChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OncreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OncreatedDateChanged();
    #endregion
		
		public ContactInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pkId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long pkId
		{
			get
			{
				return this._pkId;
			}
			set
			{
				if ((this._pkId != value))
				{
					this.OnpkIdChanging(value);
					this.SendPropertyChanging();
					this._pkId = value;
					this.SendPropertyChanged("pkId");
					this.OnpkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactName", DbType="NVarChar(100)")]
		public string contactName
		{
			get
			{
				return this._contactName;
			}
			set
			{
				if ((this._contactName != value))
				{
					this.OncontactNameChanging(value);
					this.SendPropertyChanging();
					this._contactName = value;
					this.SendPropertyChanged("contactName");
					this.OncontactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailId", DbType="NVarChar(100)")]
		public string emailId
		{
			get
			{
				return this._emailId;
			}
			set
			{
				if ((this._emailId != value))
				{
					this.OnemailIdChanging(value);
					this.SendPropertyChanging();
					this._emailId = value;
					this.SendPropertyChanged("emailId");
					this.OnemailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _CreatorId;
		
		private string _EventTitle;
		
		private string _EventDesc;
		
		private System.Nullable<System.DateTime> _EventStartDate;
		
		private string _EventImage;
		
		private System.Nullable<System.DateTime> _EventEndDate;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<bool> _IsDeleted;
		
		private EntitySet<Video> _Videos;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCreatorIdChanging(System.Nullable<long> value);
    partial void OnCreatorIdChanged();
    partial void OnEventTitleChanging(string value);
    partial void OnEventTitleChanged();
    partial void OnEventDescChanging(string value);
    partial void OnEventDescChanged();
    partial void OnEventStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEventStartDateChanged();
    partial void OnEventImageChanging(string value);
    partial void OnEventImageChanged();
    partial void OnEventEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEventEndDateChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Event()
		{
			this._Videos = new EntitySet<Video>(new Action<Video>(this.attach_Videos), new Action<Video>(this.detach_Videos));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorId", DbType="BigInt")]
		public System.Nullable<long> CreatorId
		{
			get
			{
				return this._CreatorId;
			}
			set
			{
				if ((this._CreatorId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorId = value;
					this.SendPropertyChanged("CreatorId");
					this.OnCreatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTitle", DbType="NVarChar(50)")]
		public string EventTitle
		{
			get
			{
				return this._EventTitle;
			}
			set
			{
				if ((this._EventTitle != value))
				{
					this.OnEventTitleChanging(value);
					this.SendPropertyChanging();
					this._EventTitle = value;
					this.SendPropertyChanged("EventTitle");
					this.OnEventTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDesc", DbType="NVarChar(MAX)")]
		public string EventDesc
		{
			get
			{
				return this._EventDesc;
			}
			set
			{
				if ((this._EventDesc != value))
				{
					this.OnEventDescChanging(value);
					this.SendPropertyChanging();
					this._EventDesc = value;
					this.SendPropertyChanged("EventDesc");
					this.OnEventDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventStartDate", DbType="Date")]
		public System.Nullable<System.DateTime> EventStartDate
		{
			get
			{
				return this._EventStartDate;
			}
			set
			{
				if ((this._EventStartDate != value))
				{
					this.OnEventStartDateChanging(value);
					this.SendPropertyChanging();
					this._EventStartDate = value;
					this.SendPropertyChanged("EventStartDate");
					this.OnEventStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventImage", DbType="NVarChar(200)")]
		public string EventImage
		{
			get
			{
				return this._EventImage;
			}
			set
			{
				if ((this._EventImage != value))
				{
					this.OnEventImageChanging(value);
					this.SendPropertyChanging();
					this._EventImage = value;
					this.SendPropertyChanged("EventImage");
					this.OnEventImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventEndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EventEndDate
		{
			get
			{
				return this._EventEndDate;
			}
			set
			{
				if ((this._EventEndDate != value))
				{
					this.OnEventEndDateChanging(value);
					this.SendPropertyChanging();
					this._EventEndDate = value;
					this.SendPropertyChanged("EventEndDate");
					this.OnEventEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Video", Storage="_Videos", ThisKey="Id", OtherKey="EventId")]
		public EntitySet<Video> Videos
		{
			get
			{
				return this._Videos;
			}
			set
			{
				this._Videos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Event", Storage="_User", ThisKey="CreatorId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._CreatorId = value.Id;
					}
					else
					{
						this._CreatorId = default(Nullable<long>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentTransaction")]
	public partial class PaymentTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _UserId;
		
		private string _TransactionNumber;
		
		private double _Amount;
		
		private long _TokenId;
		
		private System.DateTime _TransactionDate;
		
		private bool _IsDeleted;
		
		private bool _IsActive;
		
		private EntityRef<Token> _Token;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnTransactionNumberChanging(string value);
    partial void OnTransactionNumberChanged();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    partial void OnTokenIdChanging(long value);
    partial void OnTokenIdChanged();
    partial void OnTransactionDateChanging(System.DateTime value);
    partial void OnTransactionDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public PaymentTransaction()
		{
			this._Token = default(EntityRef<Token>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt NOT NULL")]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionNumber", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string TransactionNumber
		{
			get
			{
				return this._TransactionNumber;
			}
			set
			{
				if ((this._TransactionNumber != value))
				{
					this.OnTransactionNumberChanging(value);
					this.SendPropertyChanging();
					this._TransactionNumber = value;
					this.SendPropertyChanged("TransactionNumber");
					this.OnTransactionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float NOT NULL")]
		public double Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenId", DbType="BigInt NOT NULL")]
		public long TokenId
		{
			get
			{
				return this._TokenId;
			}
			set
			{
				if ((this._TokenId != value))
				{
					if (this._Token.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTokenIdChanging(value);
					this.SendPropertyChanging();
					this._TokenId = value;
					this.SendPropertyChanged("TokenId");
					this.OnTokenIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDate", DbType="DateTime NOT NULL")]
		public System.DateTime TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this.OnTransactionDateChanging(value);
					this.SendPropertyChanging();
					this._TransactionDate = value;
					this.SendPropertyChanged("TransactionDate");
					this.OnTransactionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Token_PaymentTransaction", Storage="_Token", ThisKey="TokenId", OtherKey="Id", IsForeignKey=true)]
		public Token Token
		{
			get
			{
				return this._Token.Entity;
			}
			set
			{
				Token previousValue = this._Token.Entity;
				if (((previousValue != value) 
							|| (this._Token.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Token.Entity = null;
						previousValue.PaymentTransactions.Remove(this);
					}
					this._Token.Entity = value;
					if ((value != null))
					{
						value.PaymentTransactions.Add(this);
						this._TokenId = value.Id;
					}
					else
					{
						this._TokenId = default(long);
					}
					this.SendPropertyChanged("Token");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PaymentTransaction", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PaymentTransactions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PaymentTransactions.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRoles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Token")]
	public partial class Token : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private int _NoOfUploadsAllowed;
		
		private int _Amount;
		
		private bool _IsActive;
		
		private int _ExpireDurationInDays;
		
		private EntitySet<PaymentTransaction> _PaymentTransactions;
		
		private EntitySet<Managetoken> _Managetokens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoOfUploadsAllowedChanging(int value);
    partial void OnNoOfUploadsAllowedChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnExpireDurationInDaysChanging(int value);
    partial void OnExpireDurationInDaysChanged();
    #endregion
		
		public Token()
		{
			this._PaymentTransactions = new EntitySet<PaymentTransaction>(new Action<PaymentTransaction>(this.attach_PaymentTransactions), new Action<PaymentTransaction>(this.detach_PaymentTransactions));
			this._Managetokens = new EntitySet<Managetoken>(new Action<Managetoken>(this.attach_Managetokens), new Action<Managetoken>(this.detach_Managetokens));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoOfUploadsAllowed", DbType="Int NOT NULL")]
		public int NoOfUploadsAllowed
		{
			get
			{
				return this._NoOfUploadsAllowed;
			}
			set
			{
				if ((this._NoOfUploadsAllowed != value))
				{
					this.OnNoOfUploadsAllowedChanging(value);
					this.SendPropertyChanging();
					this._NoOfUploadsAllowed = value;
					this.SendPropertyChanged("NoOfUploadsAllowed");
					this.OnNoOfUploadsAllowedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpireDurationInDays", DbType="Int NOT NULL")]
		public int ExpireDurationInDays
		{
			get
			{
				return this._ExpireDurationInDays;
			}
			set
			{
				if ((this._ExpireDurationInDays != value))
				{
					this.OnExpireDurationInDaysChanging(value);
					this.SendPropertyChanging();
					this._ExpireDurationInDays = value;
					this.SendPropertyChanged("ExpireDurationInDays");
					this.OnExpireDurationInDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Token_PaymentTransaction", Storage="_PaymentTransactions", ThisKey="Id", OtherKey="TokenId")]
		public EntitySet<PaymentTransaction> PaymentTransactions
		{
			get
			{
				return this._PaymentTransactions;
			}
			set
			{
				this._PaymentTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Token_Managetoken", Storage="_Managetokens", ThisKey="Id", OtherKey="TokenId")]
		public EntitySet<Managetoken> Managetokens
		{
			get
			{
				return this._Managetokens;
			}
			set
			{
				this._Managetokens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PaymentTransactions(PaymentTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Token = this;
		}
		
		private void detach_PaymentTransactions(PaymentTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Token = null;
		}
		
		private void attach_Managetokens(Managetoken entity)
		{
			this.SendPropertyChanging();
			entity.Token = this;
		}
		
		private void detach_Managetokens(Managetoken entity)
		{
			this.SendPropertyChanging();
			entity.Token = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _UserId;
		
		private long _RoleId;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(long value);
    partial void OnRoleIdChanged();
    #endregion
		
		public UserRole()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt NOT NULL")]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="BigInt NOT NULL")]
		public long RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(long);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _UserName;
		
		private string _Email;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _ProfilePic;
		
		private System.DateTime _CreatedDate;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.Nullable<bool> _IsToken;
		
		private System.Nullable<int> _NumberOfToken;
		
		private EntitySet<Vote> _Votes;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<PaymentTransaction> _PaymentTransactions;
		
		private EntitySet<UserRole> _UserRoles;
		
		private EntitySet<Managetoken> _Managetokens;
		
		private EntitySet<Video> _Videos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnProfilePicChanging(string value);
    partial void OnProfilePicChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnIsTokenChanging(System.Nullable<bool> value);
    partial void OnIsTokenChanged();
    partial void OnNumberOfTokenChanging(System.Nullable<int> value);
    partial void OnNumberOfTokenChanged();
    #endregion
		
		public User()
		{
			this._Votes = new EntitySet<Vote>(new Action<Vote>(this.attach_Votes), new Action<Vote>(this.detach_Votes));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._PaymentTransactions = new EntitySet<PaymentTransaction>(new Action<PaymentTransaction>(this.attach_PaymentTransactions), new Action<PaymentTransaction>(this.detach_PaymentTransactions));
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			this._Managetokens = new EntitySet<Managetoken>(new Action<Managetoken>(this.attach_Managetokens), new Action<Managetoken>(this.detach_Managetokens));
			this._Videos = new EntitySet<Video>(new Action<Video>(this.attach_Videos), new Action<Video>(this.detach_Videos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfilePic", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ProfilePic
		{
			get
			{
				return this._ProfilePic;
			}
			set
			{
				if ((this._ProfilePic != value))
				{
					this.OnProfilePicChanging(value);
					this.SendPropertyChanging();
					this._ProfilePic = value;
					this.SendPropertyChanged("ProfilePic");
					this.OnProfilePicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsToken", DbType="Bit")]
		public System.Nullable<bool> IsToken
		{
			get
			{
				return this._IsToken;
			}
			set
			{
				if ((this._IsToken != value))
				{
					this.OnIsTokenChanging(value);
					this.SendPropertyChanging();
					this._IsToken = value;
					this.SendPropertyChanged("IsToken");
					this.OnIsTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfToken", DbType="Int")]
		public System.Nullable<int> NumberOfToken
		{
			get
			{
				return this._NumberOfToken;
			}
			set
			{
				if ((this._NumberOfToken != value))
				{
					this.OnNumberOfTokenChanging(value);
					this.SendPropertyChanging();
					this._NumberOfToken = value;
					this.SendPropertyChanged("NumberOfToken");
					this.OnNumberOfTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Vote", Storage="_Votes", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Vote> Votes
		{
			get
			{
				return this._Votes;
			}
			set
			{
				this._Votes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Event", Storage="_Events", ThisKey="Id", OtherKey="CreatorId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PaymentTransaction", Storage="_PaymentTransactions", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<PaymentTransaction> PaymentTransactions
		{
			get
			{
				return this._PaymentTransactions;
			}
			set
			{
				this._PaymentTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_UserRoles", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Managetoken", Storage="_Managetokens", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Managetoken> Managetokens
		{
			get
			{
				return this._Managetokens;
			}
			set
			{
				this._Managetokens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Video", Storage="_Videos", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Video> Videos
		{
			get
			{
				return this._Videos;
			}
			set
			{
				this._Videos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Votes(Vote entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Votes(Vote entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PaymentTransactions(PaymentTransaction entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PaymentTransactions(PaymentTransaction entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Managetokens(Managetoken entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Managetokens(Managetoken entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Managetoken")]
	public partial class Managetoken : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _UserId;
		
		private long _TokenId;
		
		private System.DateTime _CreateDate;
		
		private bool _IsActive;
		
		private string _UniqueTokenId;
		
		private System.DateTime _WillExpireOn;
		
		private int _RemainingUploadCount;
		
		private EntityRef<Token> _Token;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnTokenIdChanging(long value);
    partial void OnTokenIdChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnUniqueTokenIdChanging(string value);
    partial void OnUniqueTokenIdChanged();
    partial void OnWillExpireOnChanging(System.DateTime value);
    partial void OnWillExpireOnChanged();
    partial void OnRemainingUploadCountChanging(int value);
    partial void OnRemainingUploadCountChanged();
    #endregion
		
		public Managetoken()
		{
			this._Token = default(EntityRef<Token>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt NOT NULL")]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenId", DbType="BigInt NOT NULL")]
		public long TokenId
		{
			get
			{
				return this._TokenId;
			}
			set
			{
				if ((this._TokenId != value))
				{
					if (this._Token.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTokenIdChanging(value);
					this.SendPropertyChanging();
					this._TokenId = value;
					this.SendPropertyChanged("TokenId");
					this.OnTokenIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueTokenId", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UniqueTokenId
		{
			get
			{
				return this._UniqueTokenId;
			}
			set
			{
				if ((this._UniqueTokenId != value))
				{
					this.OnUniqueTokenIdChanging(value);
					this.SendPropertyChanging();
					this._UniqueTokenId = value;
					this.SendPropertyChanged("UniqueTokenId");
					this.OnUniqueTokenIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WillExpireOn", DbType="DateTime NOT NULL")]
		public System.DateTime WillExpireOn
		{
			get
			{
				return this._WillExpireOn;
			}
			set
			{
				if ((this._WillExpireOn != value))
				{
					this.OnWillExpireOnChanging(value);
					this.SendPropertyChanging();
					this._WillExpireOn = value;
					this.SendPropertyChanged("WillExpireOn");
					this.OnWillExpireOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemainingUploadCount", DbType="Int NOT NULL")]
		public int RemainingUploadCount
		{
			get
			{
				return this._RemainingUploadCount;
			}
			set
			{
				if ((this._RemainingUploadCount != value))
				{
					this.OnRemainingUploadCountChanging(value);
					this.SendPropertyChanging();
					this._RemainingUploadCount = value;
					this.SendPropertyChanged("RemainingUploadCount");
					this.OnRemainingUploadCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Token_Managetoken", Storage="_Token", ThisKey="TokenId", OtherKey="Id", IsForeignKey=true)]
		public Token Token
		{
			get
			{
				return this._Token.Entity;
			}
			set
			{
				Token previousValue = this._Token.Entity;
				if (((previousValue != value) 
							|| (this._Token.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Token.Entity = null;
						previousValue.Managetokens.Remove(this);
					}
					this._Token.Entity = value;
					if ((value != null))
					{
						value.Managetokens.Add(this);
						this._TokenId = value.Id;
					}
					else
					{
						this._TokenId = default(long);
					}
					this.SendPropertyChanged("Token");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Managetoken", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Managetokens.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Managetokens.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Video")]
	public partial class Video : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _EventId;
		
		private long _UserId;
		
		private string _VideoPath;
		
		private string _VideoTitle;
		
		private string _VideoDesc;
		
		private System.DateTime _CreatedDate;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private long _CategoryId;
		
		private string _TokenUniqueId;
		
		private EntitySet<Vote> _Votes;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnEventIdChanging(long value);
    partial void OnEventIdChanged();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnVideoPathChanging(string value);
    partial void OnVideoPathChanged();
    partial void OnVideoTitleChanging(string value);
    partial void OnVideoTitleChanged();
    partial void OnVideoDescChanging(string value);
    partial void OnVideoDescChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnCategoryIdChanging(long value);
    partial void OnCategoryIdChanged();
    partial void OnTokenUniqueIdChanging(string value);
    partial void OnTokenUniqueIdChanged();
    #endregion
		
		public Video()
		{
			this._Votes = new EntitySet<Vote>(new Action<Vote>(this.attach_Votes), new Action<Vote>(this.detach_Votes));
			this._Category = default(EntityRef<Category>);
			this._Event = default(EntityRef<Event>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="BigInt NOT NULL")]
		public long EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt NOT NULL")]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string VideoPath
		{
			get
			{
				return this._VideoPath;
			}
			set
			{
				if ((this._VideoPath != value))
				{
					this.OnVideoPathChanging(value);
					this.SendPropertyChanging();
					this._VideoPath = value;
					this.SendPropertyChanged("VideoPath");
					this.OnVideoPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string VideoTitle
		{
			get
			{
				return this._VideoTitle;
			}
			set
			{
				if ((this._VideoTitle != value))
				{
					this.OnVideoTitleChanging(value);
					this.SendPropertyChanging();
					this._VideoTitle = value;
					this.SendPropertyChanged("VideoTitle");
					this.OnVideoTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoDesc", DbType="NVarChar(MAX)")]
		public string VideoDesc
		{
			get
			{
				return this._VideoDesc;
			}
			set
			{
				if ((this._VideoDesc != value))
				{
					this.OnVideoDescChanging(value);
					this.SendPropertyChanging();
					this._VideoDesc = value;
					this.SendPropertyChanged("VideoDesc");
					this.OnVideoDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="BigInt NOT NULL")]
		public long CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenUniqueId", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TokenUniqueId
		{
			get
			{
				return this._TokenUniqueId;
			}
			set
			{
				if ((this._TokenUniqueId != value))
				{
					this.OnTokenUniqueIdChanging(value);
					this.SendPropertyChanging();
					this._TokenUniqueId = value;
					this.SendPropertyChanged("TokenUniqueId");
					this.OnTokenUniqueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Video_Vote", Storage="_Votes", ThisKey="Id", OtherKey="VideoId")]
		public EntitySet<Vote> Votes
		{
			get
			{
				return this._Votes;
			}
			set
			{
				this._Votes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Video", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Videos.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Videos.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(long);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Video", Storage="_Event", ThisKey="EventId", OtherKey="Id", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Videos.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Videos.Add(this);
						this._EventId = value.Id;
					}
					else
					{
						this._EventId = default(long);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Video", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Videos.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Videos.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Votes(Vote entity)
		{
			this.SendPropertyChanging();
			entity.Video = this;
		}
		
		private void detach_Votes(Vote entity)
		{
			this.SendPropertyChanging();
			entity.Video = null;
		}
	}
	
	public partial class usp_GetVideoCommentsResult
	{
		
		private long _commentId;
		
		private long _userId;
		
		private string _username;
		
		private string _profilePic;
		
		private string _commentText;
		
		public usp_GetVideoCommentsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commentId", DbType="BigInt NOT NULL")]
		public long commentId
		{
			get
			{
				return this._commentId;
			}
			set
			{
				if ((this._commentId != value))
				{
					this._commentId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="BigInt NOT NULL")]
		public long userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this._userId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(50)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this._username = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profilePic", DbType="NVarChar(100)")]
		public string profilePic
		{
			get
			{
				return this._profilePic;
			}
			set
			{
				if ((this._profilePic != value))
				{
					this._profilePic = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commentText", DbType="NVarChar(MAX)")]
		public string commentText
		{
			get
			{
				return this._commentText;
			}
			set
			{
				if ((this._commentText != value))
				{
					this._commentText = value;
				}
			}
		}
	}
	
	public partial class usp_GetRecentEventsResult
	{
		
		private long _id;
		
		private System.Nullable<long> _creatorid;
		
		private string _eventtitle;
		
		public usp_GetRecentEventsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="BigInt NOT NULL")]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creatorid", DbType="BigInt")]
		public System.Nullable<long> creatorid
		{
			get
			{
				return this._creatorid;
			}
			set
			{
				if ((this._creatorid != value))
				{
					this._creatorid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventtitle", DbType="NVarChar(50)")]
		public string eventtitle
		{
			get
			{
				return this._eventtitle;
			}
			set
			{
				if ((this._eventtitle != value))
				{
					this._eventtitle = value;
				}
			}
		}
	}
	
	public partial class usp_GetUpcomingEventsResult
	{
		
		private long _id;
		
		private System.Nullable<long> _creatorid;
		
		private string _eventtitle;
		
		private string _eventdesc;
		
		private System.Nullable<System.DateTime> _eventstartdate;
		
		private string _eventImage;
		
		private System.Nullable<System.DateTime> _eventenddate;
		
		private System.Nullable<System.DateTime> _createdate;
		
		private System.Nullable<bool> _isactive;
		
		private System.Nullable<bool> _isdeleted;
		
		public usp_GetUpcomingEventsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="BigInt NOT NULL")]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creatorid", DbType="BigInt")]
		public System.Nullable<long> creatorid
		{
			get
			{
				return this._creatorid;
			}
			set
			{
				if ((this._creatorid != value))
				{
					this._creatorid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventtitle", DbType="NVarChar(50)")]
		public string eventtitle
		{
			get
			{
				return this._eventtitle;
			}
			set
			{
				if ((this._eventtitle != value))
				{
					this._eventtitle = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventdesc", DbType="NVarChar(MAX)")]
		public string eventdesc
		{
			get
			{
				return this._eventdesc;
			}
			set
			{
				if ((this._eventdesc != value))
				{
					this._eventdesc = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventstartdate", DbType="Date")]
		public System.Nullable<System.DateTime> eventstartdate
		{
			get
			{
				return this._eventstartdate;
			}
			set
			{
				if ((this._eventstartdate != value))
				{
					this._eventstartdate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventImage", DbType="NVarChar(200)")]
		public string eventImage
		{
			get
			{
				return this._eventImage;
			}
			set
			{
				if ((this._eventImage != value))
				{
					this._eventImage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventenddate", DbType="Date")]
		public System.Nullable<System.DateTime> eventenddate
		{
			get
			{
				return this._eventenddate;
			}
			set
			{
				if ((this._eventenddate != value))
				{
					this._eventenddate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> createdate
		{
			get
			{
				return this._createdate;
			}
			set
			{
				if ((this._createdate != value))
				{
					this._createdate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isactive", DbType="Bit")]
		public System.Nullable<bool> isactive
		{
			get
			{
				return this._isactive;
			}
			set
			{
				if ((this._isactive != value))
				{
					this._isactive = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isdeleted", DbType="Bit")]
		public System.Nullable<bool> isdeleted
		{
			get
			{
				return this._isdeleted;
			}
			set
			{
				if ((this._isdeleted != value))
				{
					this._isdeleted = value;
				}
			}
		}
	}
	
	public partial class usp_GetEventPostsResult
	{
		
		private long _videoId;
		
		private long _userId;
		
		private string _videoPath;
		
		private string _videoTitle;
		
		private string _VideoDesc;
		
		private System.DateTime _CreatedDate;
		
		private string _Username;
		
		private long _Eventid;
		
		private string _profilePic;
		
		private System.Nullable<int> _videoCount;
		
		private System.Nullable<int> _voteCount;
		
		private string _isVote;
		
		public usp_GetEventPostsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_videoId", DbType="BigInt NOT NULL")]
		public long videoId
		{
			get
			{
				return this._videoId;
			}
			set
			{
				if ((this._videoId != value))
				{
					this._videoId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="BigInt NOT NULL")]
		public long userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this._userId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_videoPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string videoPath
		{
			get
			{
				return this._videoPath;
			}
			set
			{
				if ((this._videoPath != value))
				{
					this._videoPath = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_videoTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string videoTitle
		{
			get
			{
				return this._videoTitle;
			}
			set
			{
				if ((this._videoTitle != value))
				{
					this._videoTitle = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoDesc", DbType="NVarChar(MAX)")]
		public string VideoDesc
		{
			get
			{
				return this._VideoDesc;
			}
			set
			{
				if ((this._VideoDesc != value))
				{
					this._VideoDesc = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this._CreatedDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this._Username = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eventid", DbType="BigInt NOT NULL")]
		public long Eventid
		{
			get
			{
				return this._Eventid;
			}
			set
			{
				if ((this._Eventid != value))
				{
					this._Eventid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profilePic", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string profilePic
		{
			get
			{
				return this._profilePic;
			}
			set
			{
				if ((this._profilePic != value))
				{
					this._profilePic = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_videoCount", DbType="Int")]
		public System.Nullable<int> videoCount
		{
			get
			{
				return this._videoCount;
			}
			set
			{
				if ((this._videoCount != value))
				{
					this._videoCount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_voteCount", DbType="Int")]
		public System.Nullable<int> voteCount
		{
			get
			{
				return this._voteCount;
			}
			set
			{
				if ((this._voteCount != value))
				{
					this._voteCount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isVote", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string isVote
		{
			get
			{
				return this._isVote;
			}
			set
			{
				if ((this._isVote != value))
				{
					this._isVote = value;
				}
			}
		}
	}
	
	public partial class usp_CheckEventStatusResult
	{
		
		private int _isUploading;
		
		public usp_CheckEventStatusResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isUploading", DbType="Int NOT NULL")]
		public int isUploading
		{
			get
			{
				return this._isUploading;
			}
			set
			{
				if ((this._isUploading != value))
				{
					this._isUploading = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
